
import std / [strutils, sequtils]

proc elifSection(dest, destB: var string; values, enumVal: string) =
  let vals = values.strip.split(", ").filterIt(it.strip.len > 0)
  if vals.len > 0:
    dest.add "  elif err == "
    let firstVal = vals[0].strip
    dest.add firstVal
    for j in 1 ..< vals.len:
      dest.add " or err == "
      dest.add vals[j].strip
    dest.add ":\n"
    dest.add "    "
    dest.add enumVal
    dest.add "\n"

    destB.add "  of "
    destB.add enumVal
    destB.add ": "
    destB.add firstVal
    destB.add "\n"

proc addDecls(dest: var string; values: string) =
  let vals = values.strip.split(", ").filterIt(it.strip.len > 0)
  if vals.len > 0:
    for val in vals:
      let v = val.strip
      if v.len > 0 and v[0] == 'E':
        dest.add "var "
        dest.add v
        dest.add " {.importc: \""
        dest.add v
        dest.add "\", header: \"<errno.h>\".}: int32\n"

proc main =
  var inp = open("errorcodes.txt", fmRead)
  var enumDecl = """# Generated by tools/gen_errorcodes.nim. DO NOT EDIT!

type
  ErrorCode* = enum ## All possible errors in one enum."""

  var errnoDecls = ""

  var fromPosix = """proc posixToErrorCode*(err: int32): ErrorCode =
  if err == 0'i32:
    Success
"""

  var fromHttp = """proc httpToErrorCode*(err: int): ErrorCode =
  if err == 200:
    Success
"""

  var toPosix = """proc errorCodeToPosix*(err: ErrorCode): int32 =
  case err
"""

  var toHttp = """proc errorCodeToHttp*(err: ErrorCode): int =
  case err
"""

  var i = 0
  for line in lines(inp):
    inc i
    if i <= 2: continue # skip header
    var parts = line.split("|")
    if parts.len == 0: continue
    if parts.len != 6:
      quit "WRONG LINE: " & line
    parts = parts[1..^2]
    enumDecl.add "\n    "
    let enumVal = parts[0].strip
    enumDecl.add enumVal
    enumDecl.add "  ## "
    enumDecl.add parts[3].strip

    errnoDecls.addDecls parts[1]

    fromPosix.elifSection toPosix, parts[1], enumVal
    fromHttp.elifSection toHttp, parts[2], enumVal

  fromPosix.add """  else:
    Failure"""

  fromHttp.add """  else:
    Failure"""

  toPosix.add """  else: 1'i32"""

  toHttp.add """  else: 500"""

  inp.close()

  var outf = open("src/errorcodes.nim", fmWrite)
  outf.writeLine enumDecl
  outf.writeLine ""
  outf.writeLine errnoDecls
  outf.writeLine ""
  outf.writeLine fromPosix
  outf.writeLine ""
  outf.writeLine fromHttp
  outf.writeLine ""
  outf.writeLine toPosix
  outf.writeLine ""
  outf.writeLine toHttp
  outf.close

main()
